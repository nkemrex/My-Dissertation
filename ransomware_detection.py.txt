import os
import hashlib
import pyinotify
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import MinMaxScaler
import smtplib

# Define the path to monitor
path_to_monitor = "/home/rex/ransomware_simulation"

# Define the E-Mail address to notify if ransomware is detected
notification_email = "Nkemjikakelechig@gmail.com"

# Define the maximum file size to check (in bytes)
max_file_size = 100000000

# Define the notification message to send if ransomware is detected
notification_message = f"Ransomware detected in {path_to_monitor}"


# Define the AI-driven honeypot-enabled active defense mechanism
class RansomwareDetector(pyinotify.ProcessEvent):
    def __init__(self):
        # Initialize the Isolation Forest algorithm with a contamination rate of 0.1 and 1000 trees
        self.iforest = IsolationForest(contamination=0.1, n_estimators=1000)
        self.file_features = []
        self.scaler = MinMaxScaler()

    def process_IN_CREATE(self, event):
        if os.path.isfile(event.pathname):
            if os.path.getsize(event.pathname) <= max_file_size:
                # Extract features from the file and add them to the file features list
                features = self.extract_features(event.pathname)
                self.file_features.append(features)

                # Normalize the file features
                self.file_features = self.scaler.fit_transform(self.file_features)

                # Train the Isolation Forest algorithm with the normalized file features
                self.iforest.fit(self.file_features)

                # Check if the file is ransomware based on its score from the Isolation Forest algorithm
                score = self.iforest.score_samples([features])[0]
                if score < -0.5:
                    self.send_notification_email(notification_message)

    def process_IN_MODIFY(self, event):
        if os.path.isfile(event.pathname):
            if os.path.getsize(event.pathname) <= max_file_size:
                # Extract features from the file and update them in the file features list
                features = self.extract_features(event.pathname)
                file_hashes = [f[0] for f in self.file_features]
                if features[0] in file_hashes:
                    idx = file_hashes.index(features[0])
                    self.file_features[idx] = features
                else:
                    self.file_features.append(features)

                # Normalize the file features
                self.file_features = self.scaler.fit_transform(self.file_features)

                # Train the Isolation Forest algorithm with the normalized file features
                self.iforest.fit(self.file_features)

                # Check if the file is ransomware based on its score from the Isolation Forest algorithm
                score = self.iforest.score_samples([features])[0]
                if score < -0.5:
                    self.send_notification_email(notification_message)

    def extract_features(self, file_path):
        # Calculate the SHA256 hash of the file
        file_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                file_hash.update(chunk)
        file_hash = int(file_hash.hexdigest(), 16)

        # Calculate the file size
        file_size = os.path.getsize(file_path)

        # Combine the features into a single array
        features = [file_hash, file_size]
        return features

    def send_notification_email(self, message):
        sender_email = "nkimrex55@gmail.com"
        sender_password = "lordrex1$"
        recipient_email = notification_email
        smtp_server = "smtp.gmail.com"
        smtp_port = 587

        email_message = f"Subject: Ransomware Detected\n\n{message}"

        try:
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient_email, email_message)
            server.quit()
            print("Notification email sent successfully!")
        except Exception as e:
            print(f"Failed to send notification email: {str(e)}")


def main():
    wm = pyinotify.WatchManager()
    handler = RansomwareDetector()
    wm.add_watch(path_to_monitor, pyinotify.IN_CREATE | pyinotify.IN_MODIFY)
    notifier = pyinotify.Notifier(wm, handler)
    notifier.loop()


if __name__ == '__main__':
    main()
